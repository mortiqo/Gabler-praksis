/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { SWROnInitThenCacheFirst } from "workbox/SWROnInitThenCacheFirst";
import { resetVariables } from "./workbox/init";

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith("/_")) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html")
);

registerRoute(
  ({ url }) =>
    url.origin === self.location.origin &&
    (url.pathname.endsWith(".png") ||
      url.pathname.endsWith(".ico") ||
      url.pathname.endsWith(".svg")),
  new SWROnInitThenCacheFirst({
    cacheName: "images",
  })
);

registerRoute(
  ({ url }) =>
    url.origin === self.location.origin &&
    url.pathname.endsWith(".html") &&
    !url.pathname.includes("index.html") &&
    !url.pathname.includes("keycloak-silent-check-sso.html"),
  new SWROnInitThenCacheFirst({
    cacheName: "custom-html",
  })
);

registerRoute(
  ({ url }) =>
    url.origin === self.location.origin &&
    url.pathname.endsWith(".json") &&
    url.pathname.includes("/locales/"),
  new SWROnInitThenCacheFirst({
    cacheName: "translations",
  })
);

registerRoute(
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.includes("keycloak"),
  new SWROnInitThenCacheFirst({
    cacheName: "keycloak",
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data) {
    if (event.data.type === "INIT") {
      // reset SWROnInitThenCacheFirst strategy variables
      resetVariables();
    } else if (event.data.type === "SKIP_WAITING") {
      self.skipWaiting();
    }
  }
});
